package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	finnhub "github.com/Finnhub-Stock-API/finnhub-go"
)

type Model struct {
	CurrentPrice       json.Number `json:"c"`
	Change             json.Number `json:"d"`
	PercentChange      json.Number `json:"dp"`
	HighPriceOfDay     json.Number `json:"h"`
	LowPriceOfDay      json.Number `json:"l"`
	OpenPriceOfDay     json.Number `json:"o"`
	PreviousPriceClose json.Number `json:"pc"`
}

func main() {

	for {
		cfg := finnhub.NewConfiguration()
		cfg.AddDefaultHeader("X-Finnhub-Token", "c4d4lvqad3icnt8r9eng")
		finnhubClient := finnhub.NewAPIClient(cfg).DefaultApi

		ahora := time.Now()

		cryptoCandles, _, err := finnhubClient.CryptoCandles(context.Background()).Symbol("BINANCE:BTCUSDT").Resolution("D").From(ahora.Add(24 * time.Hour * -1).Unix()).To(time.Now().Unix()).Execute()
		volume := cryptoCandles.GetV()
		if err != nil {
			fmt.Println(err)
		}

		res, err := http.Get("http://finnhub.io/api/v1/quote?symbol=BINANCE:BTCUSDT&token=c4d4lvqad3icnt8r9eng")
		if err != nil {
			log.Fatal(err)
		}
		defer res.Body.Close()

		data := Model{}
		err = json.NewDecoder(res.Body).Decode(&data)
		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Printf("----------BTC-----------\n, current price: %s\n, change: %s\n, percent change: %s\n, highest price of day: %s\n, lowest price of day: %s\n, open price of day: %s\n, previous price close: %s\n, volume: %v\n \n---------------------------\n", data.CurrentPrice, data.Change, data.PercentChange, data.HighPriceOfDay, data.LowPriceOfDay, data.OpenPriceOfDay, data.PreviousPriceClose, volume)

		stockCandles, _, err := finnhubClient.CryptoCandles(context.Background()).Symbol("BINANCE:ETHUSDT").Resolution("D").From(ahora.Add(24 * time.Hour * -1).Unix()).To(time.Now().Unix()).Execute()
		volume = stockCandles.GetV()
		res, err = http.Get("http://finnhub.io/api/v1/quote?symbol=BINANCE:ETHUSDT&token=c4d4lvqad3icnt8r9eng")
		if err != nil {
			log.Fatal(err)
		}
		defer res.Body.Close()

		data = Model{}
		err = json.NewDecoder(res.Body).Decode(&data)
		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Printf("----------ETH-----------\n, current price: %s\n, change: %s\n, percent change: %s\n, highest price of day: %s\n, lowest price of day: %s\n, open price of day: %s\n, previous price close: %s\n, volume: %v\n \n---------------------------\n", data.CurrentPrice, data.Change, data.PercentChange, data.HighPriceOfDay, data.LowPriceOfDay, data.OpenPriceOfDay, data.PreviousPriceClose, volume)

		time.Sleep(5 * time.Second)

	}
}
